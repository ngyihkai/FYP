###     PipeCNN         ###
#method to do project:http://www.ithinktech.cn/index.php?c=content&a=show&id=411#
#http://installing-caffe-the-right-way.wikidot.com/start
#https://github.com/adeelz92/Install-Caffe-on-Ubuntu-16.04-Python-3/blob/master/README.md
git clone https://github.com/doonny/PipeCNN.git

##download##
https://drive.google.com/drive/folders/0B3srpZY5rHcASEhSSmh3Tm5LclU?resourcekey=0-RIzIu_hSmEM_w9WLYIhTWQ&usp=sharing
Put all the data files in the ./data folder.

###     caffe   ###
#general dependencies
sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler
sudo apt-get install --no-install-recommends libboost-all-dev

##BLAS
sudo apt-get install libatlas-base-dev

##chk python and cuda version##
python3 -V
nvcc -V

#remaining dependencies
# vi editor: https://www.redhat.com/sysadmin/introduction-vi-editor

sudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev
mkdir .local/install
cd ./local/install
cd Downloads
git clone https://github.com/BVLC/caffe.git
cd caffe
sudo gedit Makefile.config
ls
find -name requirements.txt
chk requirement location
cd python
for req in $(cat requirements.txt); do pip install $req; done
cd ..
make pycaffe
cd
sudo gedit ~/.bashrc
export PYTHONPATH=/home/user/imeynyk/Downloads/caffee/python
cd Downloads/caffee/python
python
import caffe

ImportError: /usr/lib/x86_64-linux-gnu/libboost_python-py35.so.1.58.0: undefined symbol: PyUnicode_AsUTF8String
##cd /usr/lib/x86_64-linux-gnu
sudo rm -rf libboost_python-py35.so.1.58.0
sudo ln -s libboost_python-py27.so libboost_python-py35.so.1.58.0
sudo ldconfig
##


###ignore###
python -m site
ls
cp Makefile.config.example Makefile.config
vi Makefile.config
click x= remove, CPU=XXX
/home/imeynyk/.local/lib/python2.7/site-packages
Click I at 2nd line
right click and paste to python path
Then press keyboard Esc 
type ZZ to quit
ls /home/imeynyk/.local/lib/python2.7/site-packages
find /home/imeynyk/.local/lib/python2.7/site-packages -name numpy
vi Makefile.config
click i at 3nd line, remove 3rd line
Then press keyboard Esc 
remove # in With_pYTHON_LAYER
type ZZ to quit
/home/imeynyk/.local/lib/python3.5/site-packages/numpy/core/include


vi Makefile.config
+++ INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serial/
ls /usr/include/hdf5/serial/
+++ LIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib /usr/lib/x86_64-linux-gnu/hdf5/serial
ls /usr/lib/x86_64-linux-gnu/hdf5/serial
find /usr/lib -name hdf5
make clean
make all
make runtest
make pycaffe
make pytest
pip install pydot
sudo apt-get install dot
sudo apt-cache search dot
sudo apt-get install graphviz
python, import pydot
make pytest

#another method from caffe.com
mkdir build
cd build
cmake ..
make all
make install
make runtest

# Uncomment to use Python 3 (default is Python 2)
# PYTHON_LIBRARIES := boost_python3 python3.5m
chg to PYTHON_LIBRARIES := boost_python3 python3.5m

##cd /usr/lib/x86_64-linux-gnu
sudo rm -rf libboost_python-py35.so.1.58.0
sudo ln -s libboost_python-py27.so libboost_python-py35.so.1.58.0
sudo ldconfig
##
cd /usr/lib/x86_64-linux-gnu/
sudo ln -s libboost_python-py35.so libboost_python3.so
sudo ln -s libpython3.5m.so.1.0 libpython3.5m.so

dpkg -L libhdf5-dev | grep so
Make sure the path /usr/lib/x86_64-linux-gnu (which contains libhdf5.so and libhdf5_hl.so) is in Makefile.config's LIBRARY_DIRS


sudo gedit Makefile.config
sudo apt-get install python-matplotlib python-numpy python-pil python-scipy
sudo apt-get install build-essential cython
sudo apt-get install python-skimage
sudo apt-get install python3-tk
pip3 install scikit-image


##      activate matlab         ##
make all matcaffe
make mattest
After successful building and testing, add this package to Matlab search PATH by 
starting matlab from caffe root folder and running the following commands in Matlab command window.
cd Downloads/caffee
sudo /usr/local/MATLAB/R2018a/bin/matlab
addpath ./matlab
savepath ./matlab


###new caffe###
## Refer to http://caffe.berkeleyvision.org/installation.html
# Contributions simplifying and improving our build system are welcome!

# cuDNN acceleration switch (uncomment to build with cuDNN).
# USE_CUDNN := 1

# CPU-only switch (uncomment to build without GPU support).
 CPU_ONLY := 1

# uncomment to disable IO dependencies and corresponding data layers
# USE_OPENCV := 0
# USE_LEVELDB := 0
# USE_LMDB := 0
# This code is taken from https://github.com/sh1r0/caffe-android-lib
# USE_HDF5 := 0

# uncomment to allow MDB_NOLOCK when reading LMDB files (only if necessary)
#       You should not set this flag if you will be reading LMDBs with any
#       possibility of simultaneous read and write
# ALLOW_LMDB_NOLOCK := 1

# Uncomment if you're using OpenCV 3
# OPENCV_VERSION := 3

# To customize your choice of compiler, uncomment and set the following.
# N.B. the default for Linux is g++ and the default for OSX is clang++
# CUSTOM_CXX := g++

# CUDA directory contains bin/ and lib/ directories that we need.
CUDA_DIR := /usr/local/cuda
# On Ubuntu 14.04, if cuda tools are installed via
# "sudo apt-get install nvidia-cuda-toolkit" then use this instead:
# CUDA_DIR := /usr

# CUDA architecture setting: going with all of them.
# For CUDA < 6.0, comment the *_50 through *_61 lines for compatibility.
# For CUDA < 8.0, comment the *_60 and *_61 lines for compatibility.
# For CUDA >= 9.0, comment the *_20 and *_21 lines for compatibility.
CUDA_ARCH := -gencode arch=compute_20,code=sm_20 \
                -gencode arch=compute_20,code=sm_21 \
                -gencode arch=compute_30,code=sm_30 \
                -gencode arch=compute_35,code=sm_35 \
                -gencode arch=compute_50,code=sm_50 \
                -gencode arch=compute_52,code=sm_52 \
                -gencode arch=compute_60,code=sm_60 \
                -gencode arch=compute_61,code=sm_61 \
                -gencode arch=compute_61,code=compute_61

# BLAS choice:
# atlas for ATLAS (default)
# mkl for MKL
# open for OpenBlas
BLAS := atlas
# Custom (MKL/ATLAS/OpenBLAS) include and lib directories.
# Leave commented to accept the defaults for your choice of BLAS
# (which should work)!
# BLAS_INCLUDE := /path/to/your/blas
# BLAS_LIB := /path/to/your/blas

# Homebrew puts openblas in a directory that is not on the standard search path
# BLAS_INCLUDE := $(shell brew --prefix openblas)/include
# BLAS_LIB := $(shell brew --prefix openblas)/lib

# This is required only if you will compile the matlab interface.
# MATLAB directory should contain the mex binary in /bin.
MATLAB_DIR := /usr/local/MATLAB/R2018a
MATLAB_DIR := /usr/local/MATLAB/R2018a/bin

# NOTE: this is required only if you will compile the python interface.
# We need to be able to find Python.h and numpy/arrayobject.h.
PYTHON_INCLUDE := /usr/include/python2.7 \
                /usr/lib/python2.7/dist-packages/numpy/core/include
# Anaconda Python distribution is quite popular. Include path:
# Verify anaconda location, sometimes it's in root.
# ANACONDA_HOME := $(HOME)/anaconda
# PYTHON_INCLUDE := $(ANACONDA_HOME)/include \
                # $(ANACONDA_HOME)/include/python2.7 \
                # $(ANACONDA_HOME)/lib/python2.7/site-packages/numpy/core/include

# Uncomment to use Python 3 (default is Python 2)
# PYTHON_LIBRARIES := boost_python3-py35 python3.5m
# PYTHON_INCLUDE := /usr/include/python3.5m \
#                 /usr/lib/python3.5/dist-packages/numpy/core/include

# We need to be able to find libpythonX.X.so or .dylib.
PYTHON_LIB := usr/lib/x86_64-linux-gnu
# PYTHON_LIB := $(ANACONDA_HOME)/lib

# Homebrew installs numpy in a non standard path (keg only)
# PYTHON_INCLUDE += $(dir $(shell python -c 'import numpy.core; print(numpy.core.__file__)'))/include
# PYTHON_LIB += $(shell brew --prefix numpy)/lib

# Uncomment to support layers written in Python (will link against Python libs)
# WITH_PYTHON_LAYER := 1

# Whatever else you find you need goes here.
INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serial 
LIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib /usr/lib/x86_64-linux-gnu/hdf5/serial/

# If Homebrew is installed at a non standard location (for example your home directory) and you use it for general dependencies
# INCLUDE_DIRS += $(shell brew --prefix)/include
# LIBRARY_DIRS += $(shell brew --prefix)/lib

# NCCL acceleration switch (uncomment to build with NCCL)
# https://github.com/NVIDIA/nccl (last tested version: v1.2.3-1+cuda8.0)
# USE_NCCL := 1

# Uncomment to use `pkg-config` to specify OpenCV library paths.
# (Usually not necessary -- OpenCV libraries are normally installed in one of the above $LIBRARY_DIRS.)
USE_PKG_CONFIG := 1

# N.B. both build and distribute dirs are cleared on `make clean`
BUILD_DIR := build
DISTRIBUTE_DIR := distribute

# Uncomment for debugging. Does not work on OSX due to https://github.com/BVLC/caffe/issues/171
# DEBUG := 1

# The ID of the GPU that 'make runtest' will use to run unit tests.
TEST_GPUID := 0

# enable pretty build (comment to see full commands)
Q ?= @


cd PipeCNN/project_intel/device/RTL
make

###     Matlab          ### 
Matcaffe interfaces have their own natural needs.
• For MATLAB Caffe: MATLAB with the mex compiler.
Install MATLAB, and make sure that its mex is in your $PATH. -->/usr/local/MATLAB/R2018a/bin
To compile the Python and MATLAB wrappers do make pycaffe and make matcaffe respectively. Be sure to set your MATLAB and Python paths in Makefile.config first!
sudo gedit Makefile.config


##      Choose a C++ Compiler   ##
#https://www.mathworks.com/help/matlab/matlab_external/change-default-gcc-compiler-on-linux-system.html
#MATLAB® supports only one compiler for each language on Linux® platforms.
see the default C++ compiler, type one of these commands:
mex -setup cpp
mex -setup CPP
mex -setup c++


model = '/home/imeynyk/Downloads/caffee/models/bvlc_reference_caffenet/deploy.prototxt';
weights = '/home/imeynyk/Downloads/caffee/models/bvlc_reference_caffenet.caffemodel';

## cannot find bvlc_reference_caffenet.caffemodel       ##
go to https://modelzoo.co/model/bvlc-reference-caffenet
click get model
rename it to 'bvlc_reference_caffenet.caffemodel'

#generate necessary RTL libraries
./project_intel/RTL folder, run the makefile (simply type make).
cd PipeCNN/project_intel/device/RTL
make

#       successfully    #
aoc: Emulator Compilation completed successfully.
Emulator flow is successful.
To execute emulated kernel, invoke host with 
        env CL_CONTEXT_EMULATOR_DEVICE_INTELFPGA=1 <host_program>
 For multi device emulations replace the 1 with the number of devices you wish to emulate


chmod u+x setup_aoc_emu.sh
./setup_aoc_emu.sh
