caffe.set_mode_cpu();

model = './models/bvlc_reference_caffenet/deploy.prototxt';
weights = './models/bvlc_reference_caffenet.caffemodel';

net = caffe.Net(model, weights, 'test');

netparams = {{net.params('conv1',1).get_data(),net.params('conv1',2).get_data()}, ...
			{net.params('conv2',1).get_data(),net.params('conv2',2).get_data()}, ...
			{net.params('conv3',1).get_data(),net.params('conv3',2).get_data()}, ...
			{net.params('conv4',1).get_data(),net.params('conv4',2).get_data()}, ...
			{net.params('conv5',1).get_data(),net.params('conv5',2).get_data()}, ...
			{net.params('fc6',1).get_data(),net.params('fc6',2).get_data()}, ...
			{net.params('fc7',1).get_data(),net.params('fc7',2).get_data()}, ...
			{net.params('fc8',1).get_data(),net.params('fc8',2).get_data()}};

WeightWidth    = [ 8;  8;  8;  8;  8;  8;  8;  8];
WeightFrac     = [ 8;  8;  8;  8;  8; 11; 10; 10];

MathType   = fimath('RoundingMethod', 'Nearest', 'OverflowAction', 'Saturate', 'ProductMode', 'FullPrecision', 'SumMode', 'FullPrecision');

for i=1:8
	WeightType{i}  = numerictype('Signed',1, 'WordLength', WeightWidth(i), 'FractionLength', WeightFrac(i));
	weight{i}  = fi(netParams.netparams{i}{1}, WeightType{i}, MathType);
	bias{i}    = fi(netParams.netparams{i}{2}, WeightType{i}, MathType);
end

fid = fopen('weights.dat', 'w');
for i=1:8
    fwrite(fid, storedInteger(weight{i}), 'int8');
    fwrite(fid, storedInteger(bias{i}), 'int8');
end
fclose(fid);






% protofile = 'digitsnet.prototxt';
% datafile = 'digits_iter_10000.caffemodel';
% net = importCaffeNetwork(protofile,datafile)
%importCaffeNetwork
%import caffe;
caffe.set_mode_cpu();

model = '/home/imeynyk/Downloads/caffee/models/bvlc_reference_caffenet/deploy.prototxt';
weights = '/home/imeynyk/Downloads/caffee/models/bvlc_reference_caffenet.caffemodel';

%model = 'home/imeynyk/Downloads/caffee/models/bvlc_reference_caffenet/deploy.prototxt';
%weights = 'home/imeynyk/Downloads/caffee/models/bvlc_reference_caffenet.caffemodel';

%net = importCaffeNetwork(model,weights);
net = caffe.Net(model, weights, 'test');

netparams = {{net.params('conv1',1).get_data(),net.params('conv1',2).get_data()}, ...
			{net.params('conv2',1).get_data(),net.params('conv2',2).get_data()}, ...
			{net.params('conv3',1).get_data(),net.params('conv3',2).get_data()}, ...
			{net.params('conv4',1).get_data(),net.params('conv4',2).get_data()}, ...
			{net.params('conv5',1).get_data(),net.params('conv5',2).get_data()}, ...
			{net.params('fc6',1).get_data(),net.params('fc6',2).get_data()}, ...
			{net.params('fc7',1).get_data(),net.params('fc7',2).get_data()}, ...
			{net.params('fc8',1).get_data(),net.params('fc8',2).get_data()}};
        
WeightWidth    = [ 8;  8;  8;  8;  8;  8;  8;  8];
WeightFrac     = [ 8;  8;  8;  8;  8; 11; 10; 10];

MathType   = fimath('RoundingMethod', 'Nearest', 'OverflowAction', 'Saturate', 'ProductMode', 'FullPrecision', 'SumMode', 'FullPrecision');

for i=1:8
	WeightType{i}  = numerictype('Signed',1, 'WordLength', WeightWidth(i), 'FractionLength', WeightFrac(i));
	weight{i}  = fi(netParams.netparams{i}{1}, WeightType{i}, MathType);
    model = '/home/imeynyk/Downloads/caffee/models/bvlc_reference_caffenet/deploy.prototxt';
	bias{i}    = fi(netParams.netparams{i}{2}, WeightType{i}, MathType);
end

fid = fopen('weights.dat', 'w');
for i=1:8
    fwrite(fid, storedInteger(weight{i}), 'int8');
    fwrite(fid, storedInteger(bias{i}), 'int8');
end
fclose(fid);